#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend-admin-nba-office:server');
var http = require('http');
var whitelist = require('../bin/whitelist');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Scocket io server.
 */

const { Server } = require("socket.io");

const io = new Server(server,{
  cors: {
    origin: whitelist,
    methods: 'GET,PUT,PATCH,POST,DELETE',
    credentials: true,
  }
});

  io.path="/socket.io/v1/official";

io.on('connection', socket => {
  console.log('a user connected');

  //update order
  socket.on('sendUpdateOrder',function(data) {
    io.emit('OrderUpdated', data)
  })
});

/**
 * new message event
 */

var {Task} = require("../models/task.model");
var {BlogMessage} = require("../models/blog.message.model");

Task.watch().on('change', (data)=> {
  console.log('new order',data);

     io.emit('neworder',{event:'new order'})

})


BlogMessage.watch().on('change',(data)=> {
  console.log('new message',data);

   io.emit('newmessage',{event:'new message'})

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
